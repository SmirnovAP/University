Всё здесь описанное, а в основном - неописанное можно найти в книжке Рудакова и Финогенова "Язык Ассемблера, 
уроки программирования", глава про защищенный режим. Авторы настоятельно рекомендуют после прочтения методички 
не полениться, и если остались непонятные моменты - обратиться к первоисточнику.

Для начала предисловие, краткое, посравнению с самой лабой.

На процессорном уровне поддерживаются уровни привелегий 0..3; ОС запускается с уровнем 0, приложения с 3. 
Для каждого сегмента памяти устанавливается уровень привелегий, необходимый для доступа.
Существует три режима работы процессора: реальный, защищенный и виртуальный-86. Процессор всегда запускается 
в реальном режиме и выполняет код биоса. После этого он путём плясок с бубном и скакания на [s]майдане[/s] 
костылях переходит в защищённый.

Реальный режим: однозадачный, 16битные регистры, поддерживает до 1 мегабайта памяти. НЕ ПОДДЕРЖИВАЕТ разделение 
доступа (^ уровни 0..3) и виртуальную адресацию памяти. Защищенный - умеет в наоборот: 32битные регистры, 
многозадачность, до 4 ГБ виртуальной памяти. ПОДДЕРЖИВАЕТ уровни доступа (кольца защиты) и виртуальную адресацию. 
В защищенном режиме добавлены несколько дополнительных регистров. Сегментные: FS, GS;  управляющие: CR0, CR1, 
CR2, CR3. Все они, соответственно, 32-разрядные.

Управляющие регистры CR2 и CR3 используются для страничного преобразования, благодаря которому работает 
техномагия виртуальных адресов. В CR0 лежит несколько флагов, которые управляют поведением процессора - например, 
последний (31 (не забываем что нумерация у нас с нуля)) бит Protected отвечает за режим, в котором находится 
процессор - защищённый если ==1 и реальный если ==0. CR1 зарезервирован для будущих поколений процессоров.

Сегменты памяти описываются дескрипторами по 8 байт.

В современных системах, помимо сегментного регистра существует ещё теневой регистр. Про теневые регистры вообще 
нужно сделать небольшое отступление.
Процессоры начиная с 80386 начали поддерживать защищённый режим - для этого в них появились теневые регистры, 
вся адресация памяти теперь проходит через них.
_В РЕАЛЬНОМ_ режиме для обеспечения обратной совместимости при загрузке в CS,DS,SS адреса сегмента 
происходит _неявное_ создание дескриптора сегмента.
MOV		AX,DataSeg
MOV		DS,AX
Где-то на этом участке происходит определение размера сегмента ДатаСег, и создание его дескриптора (8 байт). 
После этого полученные 8 байт сразу же загружаются в теневой регистр (быдлоговоря, DS_shad).
_В ЗАЩИЩЕННОМ_ режиме "основной" сегментный регистр для адресации используется не целиком: его младшие биты (0,1,2) 
содержат в себе флаги (за описаниями к Р. и Ф.).
В качестве смещения используются биты 3..7. Другими словами, если в регистре лежит значение 8d (00001000b), то 
смещение == 00001b. При этом смещение всегда обязательно начинается с 1 - по смещению 0 лежит пустой дескриптор - 
его адрес используется для определения, а где же в памяти лежит сама GDT (Global Descriptor Table).


Таблица глобальных дескрипторов содержит в себе кучу восьмибайтовых структур, каждая из которых имеет следующий вид:
descr struc ;структура для описания декскриптора сегмента
	lim 	dw 0	;Граница (биты 0..15) - размер сегмента в байтах
	base_l 	dw 0	;База, биты 0..15 - базовый адрес задаётся в виртуальном адресном пространстве
	base_m 	db 0	;база, биты 16..23
	attr_1	db 0	;байт атрибутов 1
	attr_2	db 0	;граница(биты 16..19) и атрибуты 2
	base_h 	db 0	;База, биты 24..31
descr ends
База - адрес, с которого начинается данный сегмент. Повторюсь: адрес в _виртуальном_ адресном пространстве. Вообще, 
все упоминаемые здесь и далее адреса упоминаются в контексте виртуальности; к физическим адресам мы доступа не имеем.

Кроме того, используется также таблица дескрипторов прерываний, содержащая в себе следующие структуры:
int_descr struc
	offs_l 	dw 0	;смещение в сегменте, нижняя часть
	sel		dw 0	;селектор сегмента с кодом прерывания
	counter	db 0	;счётчик, не используется в программе
	attr	db 0	;атрибуты
	offs_h 	dw 0	;смещение в сегменте, верхняя часть
int_descr ends
Обработчики 0..16 зарезервированы под прерывания и исключения системы; 17..31 - под "будущие поколения процессоров"; 
остальные могут быть использованы пользователем.
Таким образом, обработчики для аппаратных прерываний должны начинаться минимум с 32-го (в винде принято начинать 
обработку прерываний со смещения 50h, но мы на это забьём, чтобы не пилить ещё дофига лишних обработчиков).


За сим присказка к увлекательному и болезненному путешествию в мир защищенного режима заканчивается, и начинается 
пошаговое разъяснение быдлокода, который его активирует. Пользователь приглашается проследовать 
в [s]корпус Е6[/s] файл lab2.asm.