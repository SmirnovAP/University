;1. Напишите результаты всех выражений и постройте диаграммы для второго и последнего выражений:
	(equal (+ 1 2) 3)
;		T
	(equal (* 4 7) (- 7 3))
;		nil
	(equal (abs (- 2 4)) 3)
;		nil
	(equal (abs (- 2 4)) 2)
;		T
	(eql (abs (- 2 4)) 2.0)
;		nil
	(eql (abs (- 2 4)) 2)
;		T
	(equal (abs (- 2 4)) 2)
;		T
	(eql (list (abs (- 2 4))) '(2.0))
;		nil
	(equal (list (abs (- 2 4))) '(2))
;		T
	(equalp (list (abs (- 2 4))) '(2.0))
;		T


;(equal (* 4 7) (- 7 3))
запуск обработки функции equal
	запуск обработки функции *
		4 вычисляется к 4
		7 вычисляется к 7
		применяется * к 4 и 7
		возвращается 28
	запуск обработки функции -
		7 вычисляется к 7
		3 вычисляется к 3
		применяется - к 7 и 3
		возвращается 4
	применяется equal к 28 и 4
	возвращается nil
	
;(equalp (list (abs (- 2 4))) '(2.0))
запуск обработки функции equalp
	запуск обработки функции list
		запуск обработки функции abs
			запуск обработки функции -
				2 вычисляется к 2
				4 вычисляется к 4
				применяется - к 2 и 4
				возвращается -2
			применяется abs к -2
			возвращается 2
		применяется list к 2
		возвращается (2)
	запуск обработки функции quote
		2.0 вычисляется к 2.0
		применяется quote к (2.0)
		возвращается '(2.0)
	применяется equalp к (2) и '(2.0)
	возвращается Т

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;2. Написать функцию, вычисляющую гипотенузу прямоугольного треугольника по заданным катетам и составить диаграмму ее вычисления.
(defun hyp (k1 k2)
	(sqrt
		(+ (* k1 k1)
			(* k2 k2)
		)
	)
)
(hyp 3 4)
	3 вычисляется к 3
	4 вычисляется к 4
запуск обработки функции hyp
	создается переменная k1 со значением 3
	создается переменная k2 со значением 4
	запуск обработки функции sqrt
		запуск обработки функции +
			запуск обработки функции *
				k1 вычисляется к 3
				k1 вычисляется к 3
				применяется * к 3 и 3
			возвращается 9
			запуск обработки функции *
				k2 вычисляется к 4
				k2 вычисляется к 4
				применяется * к 4 и 4
			возвращается 16
			применяется + к 9 и 16
		возвращается 25
		применяется sqrt к 25
	возвращается 5.0
возвращается 5.0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;3. Написать функцию, вычисляющую объем параллелепипеда по 3-м его сторонам,  и составить диаграмму ее вычисления.

(defun volume (a b c)
	(* a b c)
)
(volume 1 2 3)
	1 вычисляется к 1
	2 вычисляется к 2
	3 вычисляется к 3
запуск обработки функции volume
	создается переменная a со значением 1
	создается перемtнная b со значением 2
	создается переменная c со значением 3
	запуск обработки функции *
		a вычисляется к 1, b к 2, c к 3
		применяется * к 1, 2 и 3
	возвращается 6
возвращается 6

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;4. Каковы результаты вычисления следующих выражений:
	(list 'a 'b c)			(cons 'a 'b 'c)
;		C unbound				CONS requires less than 3 args
	(cons 'a (b c))			(list 'a (b c))
;		func B undefined		func B undefined
	(cons 'a '(b c))		(list a '(b c))
;		(A B C)					A unbound
	(caddr (1 2 3 4 5))		(list (+ 1 '(length '(1 2 3))))
;		1 is invalid as func	(length (quote (1 2 3))) is not NUMBER

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;5. Напишите функцию longer_than от двух списков-аргументов, которая возвращает Т, если первый аргумент имеет большую длину. Проверьте работу функции на одноуровневом и структурированном списке. Допускается использовать (length список)

(defun longer_than(a b)
	(cond
		((> (length a) (length b))
		T)
	)
)
(longer_than '(1 2 3) '(1 2))				; T
(longer_than '(1 (2 (3 (4)))) '(1 (2 (3))))	; NIL

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;6. Каковы результаты вычисления следующих выражений:
	(cons 3 (list 5 6))			(cons 3 '(list 5 6))
;		(3 5 6)						(3 LIST 5 6)
	(list 3 'from 9 'gives (- 9 3))
;		(3 FROM 9 GIVES 6)
	(+ (length '(1 foo 2 too)) (car '(21 22 23)))
;		25	; car -> 21, length -> 4, + -> 25
	(cdr '(cons is short for ans))
;		(IS SHORT FOR ANS)
	(car (list one two))		(car (list 'one 'two))
;		ONE unbound					ONE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;7. Дана функция
;	(defun mystery (x) (list (second x) (first x)))
;	Какие результаты вычисления следующих выражений:
	(mystery '(one two))	(mystery 'one 'two)
;		(TWO ONE)				requires less than 2 args
	(mystery 'free)
;		FREE is not of type LIST
	(mystery (last 'one 'two))
;		ONE is not of type LIST

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;8. Написать функцию, которая переводит температуру в системе Фаренгейта в температуру по Цельсию
	(defun f-to-c (temp)
		(*	(/ 5 9)
			(- temp 32.0)
		)
	)
	  
;	Формулы:	c = 5/9*(f-32.0)
;	Как бы назывался роман Р.Брэдбери  "+451 по Фаренгейту" в системе по Цельсию ?
	(f-to-c 451)
;		232.777777777778

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
;9. Что получится при вычислении каждого из выражений:
	(list 'cons t NIL)	 		(eval (list 'cons t NIL))
;		(CONS T NIL)				(T)
	(eval (eval (list 'cons t NIL)))
;		function T undefined	; list -> (CONS T NIL); eval -> (T)
	(apply #'cons '(t NIL))		(eval NIL)
;		(T)							NIL
	(list 'eval NIL)	 		(eval (list 'eval NIL))
;		(EVAL NIL)					NIL		; list -> (EVAL NIL); eval -> NIL




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Защита:
;eq - symbols at pointers
(list t 'eq nil		(eq t nil))
(list t 'eq t			(eq t t))
(list 2 'eq 1			(eq 2 1))
(list 2 'eq 2			(eq 2 2))
(list 2 'eq 2.0		(eq 2 2.0))
(list '(2) 'eq 2		(eq '(2) 2))
(list '(2) 'eq '(2)	(eq '(2) '(2)))

;eql - values and numbers of same type
(list t 'eql nil		(eql t nil))
(list t 'eql t			(eql t t))
(list 2 'eql 2			(eql 2 2))
(list 2 'eql 2.0		(eql 2 2.0))
(list '(2) 'eql 2		(eql '(2) 2))
(list '(2) 'eql '(2)	(eql '(2) '(2)))

;= - numbers only
(list t '= nil		(= t nil))
(list t '= t		(= t t))
(list 2 '= 2		(= 2 2))
(list 2 '= 2.0		(= 2 2.0))
(list '(2) '= 2		(= '(2) 2))
(list '(2) '= '(2)	(= '(2) '(2)))

;equal - lists and values
(list t 'equal nil		(equal t nil))
(list t 'equal t		(equal t t))
(list 2 'equal 2		(equal 2 2))
(list 2 'equal 2.0		(equal 2 2.0))
(list '(2) 'equal 2		(equal '(2) 2))
(list '(2) 'equal '(2)	(equal '(2) '(2)))

(defun cyl_volume (r h)
	(* pi r r h)
)
(cyl_volume 2 1)
	2 вычисляется к 2
	1 вычисляется к 1
запуск обработки функции cyl_volume
	создаётся переменная r со значением 2,
						 h со значением 1
	запуск обработки функции *
		pi вычисляется к 3.1415926535897931
		r вычисляется к 2
		r вычисляется к 2
		h вычисляется к 1
	возвращается 12.566370614359172
возвращается 12.566370614359172